 Session 认真机制
    了解HTTP协议的无状态性
        值得是每次http请求都是独立的，连续多次请求之间没有直接关系，服务器不会
    保留每次HTTP的请求状态
    如何突破HTTP的无状态的限制
        利用Cookie
    什么是Cookie
        Cookie是存储在用户浏览器中一段不超过4kb的字符串
        由一个名称:name value：值 其他几个用于空值Cookie有效期 安全性 使用范围
        的可选属性组成
        不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的Cookie发送到服务器
    Cookie的几大特征：
        自动发送、域名独立、过期时限
    Cookie在身份认真中的作用
        客户端在第一次登录之后服务器会返回cookie
    Cookie不具有安全性
    提高身份认真的安全性
    Session工作原理
        
    在Express只能给使用Session认真
        npm install express-Session
    配置:
        使用app.use(session) 变为全局可用的中间件
         
    app.use(
    session({
        secret:'itheima',
        resave:false,
        saveUninitialized:true,
    })
)
//解码
app.use(express.urlencoded({extended:false}))

app.post("/",(req,res)=>{
    //判断用户的登录密码是否正确
    if(req.body.username!=='admin'||req.body!=='000000')
    {
        return res.send({status:1,msg:"登录失败"})
    }
    
    //登录成功
    
    //只有成功配置了session中间件之后，才能够通过req点出来session这个属性
    req.session.user = req.body;//用户信息
    req.session.islogin = true//登录状态
    res.send({status:0,msg:'登录成功'})
})


app.get("/api/username",req,res=>{
    //从session中获取用户的名称，响应给客户端
    if(!req.session.islogin)
    {
        return res.send({status:1,msg:'fail'})
    }
    res.send({
        status:0,
        msg:'success',
        username:req.session.uesr.username,
         
    })
})  

JWT认证
    session认证机制需要配合Cookie才能实现，由于Cookie不支持跨域访问，
所以涉及到前端跨域请求后端的接口时候，需要做很多的额外配置，才能实现跨域sessoin认证

所以需要JWT认证机制(json Web Token)
    生成加密的TOKEN信息
JWT组成部分
    Header、Payload、Signature，使用.分割
安装JWT包
    npm install jsonwebtoken express-JWT
jsonwebtoken 用于申城JWT字段
express-JWT用于将JWT字符串解析还原成json对象 

定义secret秘钥
    发送生成JWT信息的时候，需要对信息进行加密
    当接受JWT信息的时候需要对secret解密
 
token = jwt.sign(用户的信息对象，加密秘钥，配置对象)
配置中间件解密，只要配置成功了，就可以把解析出来的用户信息挂载到req.user属性上 
app.use(expressJWT({secret:加密秘钥}).unless({path:不需要验证的权限   }))

捕获解析JWT失败后产生的错误
    err.name ==="UanuthorizedError"
配置一个全局的中间件去捕获错误 

